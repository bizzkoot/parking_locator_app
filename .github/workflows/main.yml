name: Custom Android Build

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Keystore
        run: |
          mkdir -p keystore
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 -d > keystore/release.keystore

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build Project
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          ./gradlew wrapper
          ./gradlew assembleRelease --stacktrace --info

      - name: List APK files
        run: find . -name "*release.apk"
      - name: Get Next Version
        id: get_version
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Get latest version tag
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n1)
          
          if [ -z "$LATEST_TAG" ]; then
            # If no tags exist, start with v1.0.0
            NEW_VERSION="v1.0.0"
          else
            # Extract and increment version
            MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
            MINOR=$(echo $LATEST_TAG | cut -d. -f2)
            PATCH=$(echo $LATEST_TAG | cut -d. -f3)
            PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and Push Tag
        run: |
          git tag -a ${{ steps.get_version.outputs.new_version }} -m "Release ${{ steps.get_version.outputs.new_version }}"
          git push origin ${{ steps.get_version.outputs.new_version }}
      - name: Set Release Type
        id: release_type
        run: |
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
          echo "APK_TYPE=debug" >> $GITHUB_OUTPUT

      - name: Rename APK
        run: |
          APK_PATH=$(find . -name "*debug.apk" | head -n 1)
          mv "$APK_PATH" "Parking Locator ${{ steps.version.outputs.NEW_VERSION }}.apk"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.NEW_VERSION }}
          files: "Parking Locator ${{ steps.version.outputs.NEW_VERSION }}.apk"
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: java
          build-mode: manual

      - name: Build for CodeQL
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
        run: |
          ./gradlew clean
          ./gradlew assembleDebug --no-daemon

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
